using System;
using System.IO;
using System.Linq;
using AutoMapper;
using kd.domainmodel.Attachment;
using kd.infrastructure.CommandQuery.Interfaces;
using kd.infrastructure.CommandQuery.Specification;
using kd.misc;
using kd.misc.Constants;
using kd.services.attachment.Models;
using Nancy;
using NLog;

namespace kd.web.api.Public
{
    public sealed class AttachmentsModule : NancyModule
    {
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger();
        public const string DefaultAttachment = "default-image-attachment.png";//todo: move to config
        public static string DefaultAttachmentPath = Path.Combine(AssemblyExtensions.AssemblyDirectory, DefaultAttachment);

        public AttachmentsModule(
            IQueryFactory queryFactory, 
            IMapper mapper)
            : base(Routing.ApiV1.PublicBase + "/attachments")
        {
            Get("/default/{attachmentVariant?original}", args =>
            {
                if (!File.Exists(DefaultAttachmentPath)) return Negotiate.WithStatusCode(HttpStatusCode.NotFound);
                return CreateFileStreamResponse(DefaultAttachmentPath, "image/jpeg", false); //todo: move to config
            });
            

            Get("/{attachmentId:guid}/{attachmentVariant?original}", args =>
            {
                var id = (Guid)args.attachmentId;
                var variant = EnumValue<ObjectAttachmentVariant>.TryParse(args.attachmentVariant);
                var failsafeVariant = default(ObjectAttachmentVariant);

                var attachment = queryFactory.GetQuery<AttachmentEntity, ByIdExpressionSpecification<AttachmentEntity>>()
                    .Where(new ByIdExpressionSpecification<AttachmentEntity>(id))
                    .FirstOrDefault();

                if (attachment == null) return Negotiate.WithStatusCode(HttpStatusCode.NotFound);

                //
                // trying to find file on FS
                var fsAttachment = mapper.Map<AttachmentEntity, FilesystemObjectAttachment>(attachment);
                if (fsAttachment.Files.All(x => x.Key != variant)) return Negotiate.WithStatusCode(HttpStatusCode.NotFound);
                var requestedFilePath = fsAttachment.Files.First(x => x.Key == variant).Value;
                // requested variant not found. using failsafe variant
                bool failSafeVariantUsed = false;
                if (!File.Exists(requestedFilePath))
                {
                    requestedFilePath = fsAttachment.Files.First(x => x.Key == failsafeVariant).Value;
                    failSafeVariantUsed = true;
                }
                if (!File.Exists(requestedFilePath))
                {
                    Logger.Warn("Unable to find attachment file for ID: {0} ({1})", fsAttachment.Id, fsAttachment.Title);

                    requestedFilePath = DefaultAttachmentPath;
                    failSafeVariantUsed = true;
                }
                if (!File.Exists(requestedFilePath))
                {
                    Logger.Error("Unable to find default attachment file for ID: {0} ({1})", fsAttachment.Id, fsAttachment.Title);
                    return Negotiate.WithStatusCode(HttpStatusCode.NotFound);
                }
                
                return CreateFileStreamResponse( requestedFilePath, attachment.MimeType, failSafeVariantUsed);
            });
        }

        private static Response CreateFileStreamResponse(string filepath, string mimetype, bool nocache)
        {
// creating the attachment file stream
            var response = new Response
            {
                ContentType = mimetype,
                Contents = (responseStream) =>
                {
                    try
                    {
                        using (var fs = new FileStream(filepath, FileMode.Open, FileAccess.Read))
                        {
                            fs.CopyTo(responseStream);
                            fs.Close();
                        }

                        responseStream.Flush();
                    }
                    catch (Exception e)
                    {
                        Logger.Warn(e, "Failed accessing to the attachment");
                    }
                }
            };
            response.Headers.Add("Cache-Control", nocache ? "no-cache, no-store, must-revalidate" : "public, max-age=315360000");
            response.Headers.Add("Content-Length", new FileInfo(filepath).Length.ToString("D"));
            return response;
        }
    }
}